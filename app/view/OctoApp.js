/*
 * File: app/view/OctoApp.js
 *
 * This file was generated by Sencha Architect version 4.2.1.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('StunningOctoPancake.view.OctoApp', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.octoapp',

    requires: [
        'StunningOctoPancake.view.OctoAppViewModel',
        'StunningOctoPancake.view.HeaderPanel',
        'Ext.tab.Panel',
        'Ext.tab.Tab',
        'Ext.form.field.File'
    ],

    viewModel: {
        type: 'octoapp'
    },
    style: 'background: #fff',
    defaultListenerScope: true,

    layout: {
        type: 'vbox',
        align: 'center'
    },
    items: [
        {
            xtype: 'headerpanel',
            flex: 1,
            margins: 'auto'
        },
        {
            xtype: 'tabpanel',
            flex: 1,
            frame: true,
            margin: '48 0 32',
            maxHeight: 210,
            maxWidth: 832.5,
            minHeight: 210,
            minWidth: 382.5,
            width: '75%',
            bodyBorder: false,
            bodyPadding: '64 32',
            activeTab: 0,
            items: [
                {
                    xtype: 'panel',
                    title: 'Upload File',
                    layout: {
                        type: 'hbox',
                        align: 'middle'
                    },
                    items: [
                        {
                            xtype: 'filefield',
                            maxWidth: 680,
                            width: '100%',
                            fieldLabel: 'Choose CSV File:',
                            labelWidth: 110,
                            listeners: {
                                change: 'onFilefieldChange'
                            }
                        },
                        {
                            xtype: 'button',
                            flex: 1,
                            margin: '0 0 0 10',
                            text: 'Submit',
                            listeners: {
                                click: 'onButtonClick'
                            }
                        }
                    ]
                },
                {
                    xtype: 'panel',
                    title: 'Search Imports',
                    layout: {
                        type: 'hbox',
                        align: 'middle'
                    },
                    items: [
                        {
                            xtype: 'textfield',
                            maxWidth: 680,
                            width: '100%',
                            fieldLabel: 'Search By Import Name',
                            labelWidth: 150
                        },
                        {
                            xtype: 'button',
                            flex: 1,
                            margin: '0 0 0 10',
                            text: 'Search'
                        }
                    ]
                }
            ]
        }
    ],

    /* remove 'C:\fakepath\' from filename */
    onFilefieldChange: function(filefield, value, eOpts) {
        let fileName = $("#filefield-1014-inputEl").val();
        fileName = fileName.substring(fileName.lastIndexOf("\\") + 1);
        if (fileName !== "") {
          $("#filefield-1014-inputEl").val(fileName);
        }
    },

    onButtonClick: function(button, e, eOpts) {
        let errorCount = 0;
        let fieldData;
        let fieldErrors;
        let fieldNames;
        let firstError;
        let fullResults;
        let rowCount = 0;

        // if (!$("#filefield-1014-inputEl")[0].files.length) {
        //   console.log("Please choose at least one file to parse.");
        //   return;
        // }

        function completeFn(results) {
            fullResults = results;
            fieldNames = fullResults.meta.fields;
            fieldData = fullResults.data;
            fieldErrors = fullResults.errors;
            if (fullResults && fieldErrors) {
            if (fieldErrors) {
                errorCount = fieldErrors.length;
                firstError = fieldErrors[0];
            }
            if (fieldData && fieldData.length > 0) {
                rowCount = fieldData.length;
            }
            }
            // printStats('Parse complete');
            console.log('    Results:', fullResults);
        }

        function errorFn(err, file) {
            console.log('ERROR:', err, file);
        }

        const file = document.getElementById("filefield-1014-inputEl").files[0];

        Papa.parse(file, {
            // base config to use for each file
            delimiter: "",
            header: true,
            dynamicTyping: false,
            skipEmptyLines: true,
            preview: 0,
            step: undefined,
            encoding: "",
            worker: false,
            comments: false,
            complete: completeFn,
            error: errorFn
        });
    }

});