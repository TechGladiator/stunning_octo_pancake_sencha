{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userClassName": "OctoPancakeControl"
    },
    "configAlternates": {
        "designer|userClassName": "string"
    },
    "name": "MyController",
    "designerId": "d4d1c18f-2991-4b5a-87be-fb289b2ba215",
    "cn": [
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "r",
                    "map",
                    "m"
                ],
                "fn": "showInfoWin",
                "implHandler": [
                    "const app = StunningOctoPancake.app;",
                    "const record = app.FieldData[r];",
                    "",
                    "app.InfoWindow.setContent(`",
                    "    <div id=\"content\">",
                    "        <div id=\"siteNotice\"></div>",
                    "        <h1 id=\"firstHeading\" class=\"firstHeading\">${record.Name}</h1>",
                    "        <div id=\"bodyContent\">",
                    "            ${record.Address} ${record[\"Address 2\"]} ${record.City} ${record.State}",
                    "            ${record.Zip}",
                    "            <br>",
                    "            <b style=\"font-weight: 900\">Purpose:</b> ${record.Purpose} <b style=\"font-weight: 900\">Property Owner:</b>",
                    "            ${record[\"Property Owner\"]} <b style=\"font-weight: 900\">Creation Date:</b> ${record[\"Creation Date\"]}",
                    "        </div>",
                    "    </div>",
                    "`);",
                    "app.InfoWindow.open(map, m);"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "showInfoWin",
            "designerId": "85dac7a6-3177-43a5-9c3a-56db8bf23338"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "app"
                ],
                "fn": "showLatLong",
                "implHandler": [
                    "if (app.FieldNames && app.Names.length < app.Names.length + 2 && app.FieldNames.length < app.Names.length + 2) {",
                    "    app.Names.push(\"Lat\", \"Long\");",
                    "    app.FieldNames.push(\"Lat\", \"Long\");",
                    "    Ext.getCmp(\"Lat\").show();",
                    "    Ext.getCmp(\"Long\").show();",
                    "    Ext.getCmp(\"editLat\").show();",
                    "    Ext.getCmp(\"editLong\").show();",
                    "}"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "showLatLong",
            "designerId": "5f2682cd-72b2-4a7d-9a2a-708f60434b17"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "interval",
                    "status",
                    "a"
                ],
                "fn": "fixGeocodeFail",
                "implHandler": [
                    "clearInterval(interval);",
                    "Ext.MessageBox.alert(status, `Geocode was not successful for the following reason: ${status}: ${a}`);"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "fixGeocodeFail",
            "designerId": "8eabd6b9-10ec-4fdf-a666-fa9b7ed3228e"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "a",
                    "fd",
                    "interval",
                    "map",
                    "markers",
                    "r"
                ],
                "fn": "codeAddress",
                "implHandler": [
                    "const geocoder = new google.maps.Geocoder();",
                    "",
                    "geocoder.geocode(",
                    "    {address: a},",
                    "    (results, status) => {",
                    "        if (status === \"OK\") {",
                    "            lat = results[0].geometry.location.lat();",
                    "            long = results[0].geometry.location.lng();",
                    "            for (const k in fd) {",
                    "                if (fd.hasOwnProperty(k)) {",
                    "                    const f = fd[k];",
                    "                    const addressComponents = results[0].address_components;",
                    "                    switch (f) {",
                    "                        case fd.Address:",
                    "                            let address = \"\";",
                    "                            for (let i = 0; i < addressComponents.length; i += 1) {",
                    "                                const e = addressComponents[i];",
                    "                                if (e.types[0] === \"street_number\") {",
                    "                                    address += e.short_name;",
                    "                                } else if (e.types[0] === \"route\") {",
                    "                                    address += ` ${e.short_name}`;",
                    "                                    if (fd.Address != address) {",
                    "                                        fd.Address = address;",
                    "                                    }",
                    "                                    break;",
                    "                                }",
                    "                            }",
                    "                            break;",
                    "                        case fd.City:",
                    "                            for (let i = 0; i < addressComponents.length; i++) {",
                    "                                const e = addressComponents[i];",
                    "                                if (e.types[0] === \"locality\" && fd.City != e.long_name) {",
                    "                                    fd.City = e.long_name;",
                    "                                }",
                    "                            }",
                    "                            break;",
                    "                        case fd.State:",
                    "                            for (let i = 0; i < addressComponents.length; i += 1) {",
                    "                                const e = addressComponents[i];",
                    "                                if (e.types[0] === \"administrative_area_level_1\" && fd.State != e.short_name) {",
                    "                                    fd.State = e.short_name;",
                    "                                }",
                    "                            }",
                    "                            break;",
                    "                        case fd.Zip:",
                    "                            for (let i = 0; i < addressComponents.length; i += 1) {",
                    "                                const e = addressComponents[i];",
                    "                                if (e.types[0] === \"postal_code\" && fd.Zip != e.short_name) {",
                    "                                    fd.Zip = e.short_name;",
                    "                                }",
                    "                            }",
                    "                            break;",
                    "                        default:",
                    "                    }",
                    "                }",
                    "            }",
                    "            fd.Lat = lat;",
                    "            fd.Long = long;",
                    "            map.setCenter(results[0].geometry.location);",
                    "            const marker = new google.maps.Marker({map, position: results[0].geometry.location});",
                    "            markers.push(marker);",
                    "            marker.addListener(\"click\", () => {",
                    "                map.setZoom(15);",
                    "                map.setCenter(results[0].geometry.location);",
                    "                this.showInfoWin(r, map, marker);",
                    "            });",
                    "        } else {",
                    "            this.fixGeocodeFail(interval, status, a);",
                    "        }",
                    "    }",
                    ");"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "codeAddress",
            "designerId": "c8f99d5a-2eb1-48ac-8971-445a9af86bfd"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "setMarkerBounds",
                "implHandler": [
                    "const app = StunningOctoPancake.app;",
                    "const bounds = new google.maps.LatLngBounds();",
                    "const map = app.Map;",
                    "const markers = app.Markers;",
                    "",
                    "for (let i = 0; i < markers.length; i += 1) {",
                    "    const e = markers[i];",
                    "    bounds.extend(e.getPosition());",
                    "}",
                    "map.setCenter(bounds.getCenter());",
                    "google.maps.event.addListenerOnce(map, \"zoom_changed\", () => {",
                    "    if (map.getZoom() > 15) {",
                    "        map.setZoom(15);",
                    "    }",
                    "});",
                    "map.fitBounds(bounds);"
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code"
            },
            "name": "setMarkerBounds",
            "designerId": "462eaf14-56cf-4e80-9920-7d51f4977df7"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "showAllControlDiv"
                ],
                "fn": "ShowAllMarkers",
                "implHandler": [
                    "const controlUI = document.createElement(\"div\");",
                    "controlUI.setAttribute(\"id\", \"showAllMarkers\");",
                    "controlUI.style.backgroundColor = \"#fff\";",
                    "controlUI.style.border = \"2px solid #fff\";",
                    "controlUI.style.borderRadius = \"3px\";",
                    "controlUI.style.boxShadow = \"0 2px 6px rgba(0,0,0,.3)\";",
                    "controlUI.style.cursor = \"pointer\";",
                    "controlUI.style.marginBottom = \"22px\";",
                    "controlUI.style.textAlign = \"center\";",
                    "controlUI.title = \"Click to show all markers\";",
                    "showAllControlDiv.appendChild(controlUI);",
                    "",
                    "const controlText = document.createElement(\"div\");",
                    "controlText.style.color = \"rgb(25,25,25)\";",
                    "controlText.style.fontFamily = \"Roboto,Arial,sans-serif\";",
                    "controlText.style.fontSize = \"16px\";",
                    "controlText.style.lineHeight = \"38px\";",
                    "controlText.style.paddingLeft = \"5px\";",
                    "controlText.style.paddingRight = \"5px\";",
                    "controlText.innerHTML = \"Show All Markers\";",
                    "controlUI.appendChild(controlText);"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "ShowAllMarkers",
            "designerId": "8bf9b5e6-0eb5-4c25-b7d3-4101d7b8521f"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|commentHeader": [
                    "Initialize Map"
                ],
                "designer|params": [
                    "app"
                ],
                "fn": "initialize",
                "implHandler": [
                    "$(\"#map\").css({",
                    "    width: \"832.5\",",
                    "    height: \"400px\",",
                    "    margin: \"30px auto 0\"",
                    "});",
                    "app.InfoWindow = new google.maps.InfoWindow({",
                    "    maxWidth: 400",
                    "});",
                    "const latlng = new google.maps.LatLng(38.92861, -98.579458);",
                    "const mapOptions = {",
                    "    zoom: 4,",
                    "    center: latlng",
                    "};",
                    "app.Map = new google.maps.Map(document.getElementById(\"map\"), mapOptions);",
                    "const showAllControlDiv = document.createElement(\"div\");",
                    "const showAllMarkers = new this.ShowAllMarkers(showAllControlDiv);",
                    "",
                    "showAllControlDiv.index = 1;",
                    "app.Map.controls[google.maps.ControlPosition.BOTTOM_CENTER].push(",
                    "    showAllControlDiv",
                    ");"
                ]
            },
            "configAlternates": {
                "designer|commentHeader": "comment",
                "fn": "string",
                "implHandler": "code",
                "designer|params": "typedarray"
            },
            "name": "initialize",
            "designerId": "de5abf43-76ff-4697-a445-a378ea472988"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "app",
                    "a"
                ],
                "fn": "geoIterate",
                "implHandler": [
                    "const markers = app.Markers;",
                    "const controller = app.getOctoPancakeControlController();",
                    "let counter = a.length;",
                    "let i = 0;",
                    "let intervalId;",
                    "",
                    "function start() {",
                    "    if (counter === 0) {",
                    "        clearInterval(intervalId);",
                    "        controller.setMarkerBounds();",
                    "        $(\"#showAllMarkers\").click(controller.setMarkerBounds);",
                    "    } else if (markers.length < app.FieldData.length) {",
                    "        controller.codeAddress(a[i], app.FieldData[i], intervalId, app.Map, markers, i);",
                    "    }",
                    "    Ext.StoreMgr.get('RecordDataStore').setData(StunningOctoPancake.app.FieldData);",
                    "    counter--;",
                    "    i++;",
                    "}",
                    "intervalId = setInterval(start, 500);",
                    "controller.showLatLong(app);"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "geoIterate",
            "designerId": "4bfefe50-4b07-4d92-aefd-f025d6fda93a"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "app"
                ],
                "fn": "getAddressList",
                "implHandler": [
                    "const addressList = [];",
                    "let recordAddress;",
                    "",
                    "for (let i = 0; i < app.FieldData.length; i++) {",
                    "    const r = app.FieldData[i];",
                    "    recordAddress = `${r.Address} ${r[\"Address 2\"]} ${r.City} ${r.State} ${r.Zip}`;",
                    "    addressList.push(recordAddress);",
                    "    recordAddress = \"\";",
                    "}",
                    "",
                    "this.geoIterate(app, addressList);"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "getAddressList",
            "designerId": "185161b1-2543-4f62-8d22-35702c39c319"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "row",
                    "fd",
                    "ec"
                ],
                "fn": "deleteRecord",
                "implHandler": [
                    "const app = StunningOctoPancake.app;",
                    "const controller = app.getOctoPancakeControlController();",
                    "",
                    "fd.splice(row, 1);",
                    "if (ec > 0) {",
                    "    this.setView([fd[row]], app.Filename);",
                    "    ec -= 1;",
                    "} else {",
                    "    this.setView(fd, app.Filename);",
                    "}",
                    "",
                    "Ext.getCmp('importFileName').hide();",
                    "Ext.getCmp('editImportFileName').show();"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "deleteRecord",
            "designerId": "76a61075-93ee-437d-8cda-4cb69c4cb3b6"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "value",
                    "metaData"
                ],
                "fn": "validateDate",
                "implHandler": [
                    "let validDate = false;",
                    "const regexp = /^\\d{4}-\\d{2}-\\d{2}$/;",
                    "",
                    "if (value && value.match(regexp)) {",
                    "    validDate = true;",
                    "}",
                    "",
                    "const d = new Date(value);",
                    "",
                    "if (!d.getTime() && d.getTime() !== 0 && validDate) {",
                    "    validDate = false;",
                    "    console.log(`${value} is an invalid date`);",
                    "}",
                    "",
                    "if (!validDate) {",
                    "    metaData.innerCls = 'invalidCell';",
                    "}"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "validateDate",
            "designerId": "621ffd9f-a030-46d5-ad5b-27a87d2bb3ff"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "value",
                    "metaData"
                ],
                "fn": "validateZip",
                "implHandler": [
                    "let validZip = false;",
                    "const regexp = /^[0-9]{5}(?:-[0-9]{4})?$/;",
                    "",
                    "if (value.length === 5) {",
                    "    validZip = true;",
                    "}",
                    "if (regexp.test(value)) {",
                    "    validZip = true;",
                    "} else {",
                    "    validZip = false;",
                    "}",
                    "if (!validZip) {",
                    "    metaData.innerCls = 'invalidCell';",
                    "}"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "validateZip",
            "designerId": "142051a7-e1a1-4a93-bc45-0860aff503d1"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "value",
                    "metaData"
                ],
                "fn": "validateState",
                "implHandler": [
                    "const states = [\"AL\", \"AK\", \"AS\", \"AZ\", \"AR\", \"CA\", \"CO\", \"CT\", \"DE\", \"DC\", \"FM\", \"FL\", \"GA\", \"GU\", \"HI\", \"ID\", \"IL\", \"IN\", \"IA\", \"KS\", \"KY\", \"LA\", \"ME\", \"MH\", \"MD\", \"MA\", \"MI\", \"MN\", \"MS\", \"MO\", \"MP\", \"MT\", \"NE\", \"NV\", \"NH\", \"NJ\", \"NM\", \"NY\", \"NC\", \"ND\", \"MP\", \"OH\", \"OK\", \"OR\", \"PW\", \"PA\", \"PR\", \"RI\", \"SC\", \"SD\", \"TN\", \"TX\", \"UT\", \"VT\", \"VI\", \"VA\", \"WA\", \"WV\", \"WI\", \"WY\"];",
                    "",
                    "let validState = false;",
                    "",
                    "for (let i = 0; i < states.length; i++) {",
                    "    if (value === states[i]) {",
                    "        validState = true;",
                    "        break;",
                    "    }",
                    "}",
                    "if (!validState) {",
                    "    metaData.innerCls = 'invalidCell';",
                    "}"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "validateState",
            "designerId": "59a0a398-cb67-4c8f-98ce-f9192c6f9f69"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "fd",
                    "file"
                ],
                "fn": "setView",
                "implHandler": [
                    "Ext.StoreMgr.get('RecordDataStore').clearData();",
                    "Ext.getCmp('importFileName').setTitle(file);",
                    "Ext.getCmp('editImportFileName').setTitle(file);",
                    "Ext.getCmp('recordButtons').show();",
                    "Ext.getCmp('importFileName').show();",
                    "Ext.getCmp('tabs').hide();",
                    "Ext.StoreMgr.get('RecordDataStore').setData(fd);",
                    "if (fd[0] !== undefined && fd[0].__parsed_extra) {",
                    "    Ext.getCmp('extra').show();",
                    "    Ext.getCmp('extra1').show();",
                    "}"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "setView",
            "designerId": "fcd8d2f5-a590-4de8-85ad-ecd7995e21b0"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "fd",
                    "ec",
                    "fe",
                    "file"
                ],
                "fn": "validateRowLengths",
                "implHandler": [
                    "if (ec > 0) {",
                    "    const message = fe.message;",
                    "    const row = fe.row;",
                    "    Ext.MessageBox.alert(`Error`, `${message} in Row: ${row + 1}`);",
                    "    Ext.getCmp('mapData').hide();",
                    "    Ext.getCmp('repairNext').show();",
                    "    this.setView([fd[row]], file);",
                    "} else {",
                    "    Ext.getCmp('mapData').show();",
                    "    Ext.getCmp('repairNext').hide();",
                    "    this.setView(fd, file);",
                    "}"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "validateRowLengths",
            "designerId": "509c9326-b56b-452a-aab3-cfc90c9d513e"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "messageBoxOkButton",
                "implHandler": [
                    "const app = StunningOctoPancake.app;",
                    "",
                    "this.validateRowLengths(app.FieldData, app.ErrorCount, app.FirstError, app.Filename);"
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code"
            },
            "name": "messageBoxOkButton",
            "designerId": "647e235e-8ee8-4d5e-a203-3f88ec47c0d3"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "fn",
                    "n",
                    "fd",
                    "ec",
                    "fe",
                    "file"
                ],
                "fn": "validateFieldNames",
                "implHandler": [
                    "let updated = false;",
                    "",
                    "for (let i = 0; i < fn.length; i ++) {",
                    "    const oldKey = fn[i];",
                    "    fn[i] = n[i];",
                    "    const newKey = fn[i];",
                    "    if (oldKey != newKey) {",
                    "        let j = 0;",
                    "        while (j < fd.length) {",
                    "            const e = fd[j];",
                    "            e[newKey] = e[oldKey];",
                    "            delete e[oldKey];",
                    "            j++;",
                    "        }",
                    "        updated = true;",
                    "    }",
                    "}",
                    "if (updated) {",
                    "    Ext.MessageBox.alert(`Update`, `Corrected invalid column names`, this.messageBoxOkButton, this);",
                    "} else {",
                    "    this.validateRowLengths(fd, ec, fe, file);",
                    "}"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "validateFieldNames",
            "designerId": "eb4c3562-3576-44b7-9dbf-ad23cc79f0cf"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "fn",
                    "n",
                    "fd",
                    "ec",
                    "fe",
                    "file"
                ],
                "fn": "validateFieldLength",
                "implHandler": [
                    "if (fn.length != n.length) {",
                    "    console.log(\"header length is wrong\");",
                    "    let codeWord;",
                    "    if (fn.length < n.length) {",
                    "        codeWord = \"few\";",
                    "    } else {",
                    "        codeWord = \"many\";",
                    "    }",
                    "    Ext.MessageBox.alert(`Too ${codeWord} fields`, `Expected ${n.length} fields but parsed ${fn.length} in \"${file}\", Row: 0. Header length errors must be corrected within file before further processing to prevent data loss.`);",
                    "} else {",
                    "    this.validateFieldNames(fn, n, fd, ec, fe, file);",
                    "}"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "validateFieldLength",
            "designerId": "63c6526c-e934-4816-a5de-530e0a78a8a0"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "msg",
                    "app"
                ],
                "fn": "printStats",
                "implHandler": [
                    "console.log(msg);",
                    "console.log(this.getApplication().FirstError || 'No column length errors');",
                    "console.log(\"  Row count:\", app.RowCount);",
                    "console.log(\"     Errors:\", app.ErrorCount);",
                    "console.log(\"    Results:\", app.FullResults);"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "printStats",
            "designerId": "fe0b5bd9-5c5c-42b8-8fe6-16d77912eabf"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "app",
                    "r"
                ],
                "fn": "setResults",
                "implHandler": [
                    "app.FullResults = r;",
                    "app.FieldNames = app.FullResults.meta.fields;",
                    "app.FieldData = app.FullResults.data;",
                    "app.FieldErrors = app.FullResults.errors;",
                    "app.ErrorCount = app.FieldErrors.length;",
                    "app.FirstError = app.FieldErrors[0];",
                    "app.RowCount = app.FieldData.length;"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "setResults",
            "designerId": "0cbf402f-9afd-4250-9145-a225464c2528"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "results"
                ],
                "fn": "completeFn",
                "implHandler": [
                    "const app = StunningOctoPancake.app;",
                    "const controller = app.getOctoPancakeControlController();",
                    "",
                    "controller.setResults(app, results);",
                    "controller.printStats('Parse complete', app);",
                    "controller.validateFieldLength(app.FieldNames, app.Names, app.FieldData, app.ErrorCount, app.FirstError, app.Filename);"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "completeFn",
            "designerId": "e4bdb401-60a1-43e5-9c82-a42cc33165e7"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "err",
                    "file"
                ],
                "fn": "errorFn",
                "implHandler": [
                    "console.log('ERROR:', err, file);"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "errorFn",
            "designerId": "c08e145f-667e-499c-9ec2-ee93e3e985e1"
        }
    ]
}